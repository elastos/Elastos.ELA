// Copyright (c) 2017-2020 The Elastos Foundation
// Use of this source code is governed by an MIT
// license that can be found in the LICENSE file.
//

package config

import (
	"testing"

	"github.com/elastos/Elastos.ELA/common"
	"github.com/stretchr/testify/assert"
)

func TestStringUint(t *testing.T) {
	//
	mainNetFoundation := "8VYXVxKKSAxkmRrfmGpQR2Kc66XhG6m3ta"
	uint168mainNetFoundation, _ := common.Uint168FromAddress(mainNetFoundation)
	assert.Equal(t, uint168mainNetFoundation,
		&common.Uint168{
			0x12, 0x9e, 0x9c, 0xf1, 0xc5, 0xf3, 0x36,
			0xfc, 0xf3, 0xa6, 0xc9, 0x54, 0x44, 0x4e,
			0xd4, 0x82, 0xc5, 0xd9, 0x16, 0xe5, 0x06,
		})

	//
	testNetFoundation := "8ZNizBf4KhhPjeJRGpox6rPcHE5Np6tFx3"
	uint168testNetFoundation, _ := common.Uint168FromAddress(testNetFoundation)
	assert.Equal(t, uint168testNetFoundation,
		&common.Uint168{
			0x12, 0xc8, 0xa2, 0xe0, 0x67, 0x72, 0x27,
			0x14, 0x4d, 0xf8, 0x22, 0xb7, 0xd9, 0x24,
			0x6c, 0x58, 0xdf, 0x68, 0xeb, 0x11, 0xce,
		})

	//
	mainNetCRCAddress := "8ZZLWQUDSbjWUn8sEdxEFJsZiRFpzg53rJ"
	uint168mainNetCRCAddress, _ := common.Uint168FromAddress(mainNetCRCAddress)
	assert.Equal(t, uint168mainNetCRCAddress,
		&common.Uint168{
			0x12, 0xca, 0xa4, 0xb0, 0x0b, 0x86, 0x8b,
			0xe7, 0x92, 0xe2, 0x40, 0x1e, 0x97, 0x4e,
			0xcd, 0x5f, 0xcb, 0x1f, 0xd9, 0xab, 0x37,
		})

	//
	testNetCRCAddress := "8JJCdEjMRm6x2rVsSMesL5gmoq7ts4wHMo"
	uint168testNetCRCAddress, _ := common.Uint168FromAddress(testNetCRCAddress)
	assert.Equal(t, uint168testNetCRCAddress,
		&common.Uint168{
			0x12, 0x23, 0x3d, 0xfb, 0x54, 0x88, 0xbb,
			0xa2, 0xe9, 0xfa, 0x9a, 0x11, 0xbb, 0x07,
			0xac, 0x10, 0xcd, 0x77, 0x29, 0x41, 0x22,
		})

	//
	DestroyELAAddress := "ELANULLXXXXXXXXXXXXXXXXXXXXXYvs3rr"
	uint168DestroyELAAddress, _ := common.Uint168FromAddress(DestroyELAAddress)
	assert.Equal(t, uint168DestroyELAAddress,
		&common.Uint168{
			0x21, 0x20, 0xfe, 0xe5, 0xd7, 0xeb, 0x3e,
			0x5c, 0x7d, 0x31, 0x97, 0xfe, 0xcf, 0x6c,
			0x0d, 0xe3, 0x0f, 0x88, 0x9a, 0xce, 0xf7,
		})

	// CRAssetsProgramHash indicates the
	// CR assets address.
	CRAssetsAddress := "CRASSETSXXXXXXXXXXXXXXXXXXXX2qDX5J"
	uint168CRAssetsAddress, _ := common.Uint168FromAddress(CRAssetsAddress)
	assert.Equal(t, uint168CRAssetsAddress,
		&common.Uint168{
			0x1c, 0x5f, 0x6c, 0x3e, 0x9f, 0x0c, 0x9a,
			0x71, 0x10, 0xb8, 0xeb, 0x6e, 0x37, 0x02,
			0x63, 0x0f, 0x71, 0x27, 0x4d, 0xf1, 0xc0,
		})

	// CRCExpensesProgramHash indicates the
	// CRC council expenses address.
	CRCExpensesAddress := "CREXPENSESXXXXXXXXXXXXXXXXXX4UdT6b"
	uint168CRCExpensesAddress, _ := common.Uint168FromAddress(CRCExpensesAddress)
	assert.Equal(t, uint168CRCExpensesAddress,
		&common.Uint168{
			0x1c, 0x60, 0x32, 0x09, 0xff, 0x5d, 0x86,
			0x54, 0x2d, 0x26, 0x1a, 0x8d, 0x22, 0x7f,
			0xe0, 0xf5, 0xee, 0x2c, 0x4e, 0xd2, 0xd3,
		})

	//
	// DPoS 2.0 stake pool address.
	StakePoolAddress := "STAKEPooLXXXXXXXXXXXXXXXXXXXpP1PQ2"
	uint168StakePoolAddress, _ := common.Uint168FromAddress(StakePoolAddress)
	assert.Equal(t, uint168StakePoolAddress,
		&common.Uint168{
			0x3f, 0x40, 0x5c, 0x9e, 0x71, 0x3f, 0x20,
			0x13, 0xa3, 0x16, 0x39, 0x49, 0xbd, 0xd6,
			0xf0, 0xbc, 0xad, 0xd6, 0xc8, 0xf5, 0xab,
		})

	//
	// DPoS 2.0 stake reward pool address.
	StakeRewardAddress := "STAKEREWARDXXXXXXXXXXXXXXXXXFD5SHU"
	uint168StakeRewardAddress, _ := common.Uint168FromAddress(StakeRewardAddress)
	assert.Equal(t, uint168StakeRewardAddress,
		&common.Uint168{
			0x3f, 0x40, 0x5c, 0x9e, 0x88, 0x6f, 0x83,
			0xef, 0xe2, 0xeb, 0x7f, 0x86, 0x5c, 0xd4,
			0xf1, 0x44, 0x5f, 0xb2, 0x11, 0x9c, 0xe6,
		})

	ELAAssetID := "b037db964a231458d2d6ffd5ea18944c4f90e63d547c5d3b9874df66a4ead0a3"
	uint256ELAAssetID, _ := common.Uint256FromHexString(ELAAssetID)
	assert.Equal(t, uint256ELAAssetID,
		&common.Uint256{
			0xb0, 0x37, 0xdb, 0x96, 0x4a, 0x23, 0x14,
			0x58, 0xd2, 0xd6, 0xff, 0xd5, 0xea, 0x18,
			0x94, 0x4c, 0x4f, 0x90, 0xe6, 0x3d, 0x54,
			0x7c, 0x5d, 0x3b, 0x98, 0x74, 0xdf, 0x66,
			0xa4, 0xea, 0xd0, 0xa3,
		})
}
